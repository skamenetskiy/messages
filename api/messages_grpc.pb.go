// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: messages.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessagesAPI_Create_FullMethodName = "/api.MessagesAPI/Create"
	MessagesAPI_Get_FullMethodName    = "/api.MessagesAPI/Get"
	MessagesAPI_Delete_FullMethodName = "/api.MessagesAPI/Delete"
)

// MessagesAPIClient is the client API for MessagesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagesAPIClient interface {
	Create(ctx context.Context, in *Create_Request, opts ...grpc.CallOption) (*Create_Response, error)
	Get(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (*Get_Response, error)
	Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error)
}

type messagesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagesAPIClient(cc grpc.ClientConnInterface) MessagesAPIClient {
	return &messagesAPIClient{cc}
}

func (c *messagesAPIClient) Create(ctx context.Context, in *Create_Request, opts ...grpc.CallOption) (*Create_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Create_Response)
	err := c.cc.Invoke(ctx, MessagesAPI_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesAPIClient) Get(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (*Get_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Get_Response)
	err := c.cc.Invoke(ctx, MessagesAPI_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesAPIClient) Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Delete_Response)
	err := c.cc.Invoke(ctx, MessagesAPI_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagesAPIServer is the server API for MessagesAPI service.
// All implementations must embed UnimplementedMessagesAPIServer
// for forward compatibility.
type MessagesAPIServer interface {
	Create(context.Context, *Create_Request) (*Create_Response, error)
	Get(context.Context, *Get_Request) (*Get_Response, error)
	Delete(context.Context, *Delete_Request) (*Delete_Response, error)
	mustEmbedUnimplementedMessagesAPIServer()
}

// UnimplementedMessagesAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessagesAPIServer struct{}

func (UnimplementedMessagesAPIServer) Create(context.Context, *Create_Request) (*Create_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMessagesAPIServer) Get(context.Context, *Get_Request) (*Get_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMessagesAPIServer) Delete(context.Context, *Delete_Request) (*Delete_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMessagesAPIServer) mustEmbedUnimplementedMessagesAPIServer() {}
func (UnimplementedMessagesAPIServer) testEmbeddedByValue()                     {}

// UnsafeMessagesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagesAPIServer will
// result in compilation errors.
type UnsafeMessagesAPIServer interface {
	mustEmbedUnimplementedMessagesAPIServer()
}

func RegisterMessagesAPIServer(s grpc.ServiceRegistrar, srv MessagesAPIServer) {
	// If the following call pancis, it indicates UnimplementedMessagesAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessagesAPI_ServiceDesc, srv)
}

func _MessagesAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Create_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagesAPI_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesAPIServer).Create(ctx, req.(*Create_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagesAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagesAPI_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesAPIServer).Get(ctx, req.(*Get_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagesAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagesAPI_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesAPIServer).Delete(ctx, req.(*Delete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagesAPI_ServiceDesc is the grpc.ServiceDesc for MessagesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MessagesAPI",
	HandlerType: (*MessagesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MessagesAPI_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MessagesAPI_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MessagesAPI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}
